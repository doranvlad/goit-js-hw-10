{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst timerBtn = document.querySelector('button[data-start]');\ntimerBtn.disabled = true;\n\nconst timerInput = document.querySelector('#datetime-picker');\n\nconst timerDays = document.querySelector('span[data-days]');\nconst timerHours = document.querySelector('span[data-hours]');\nconst timerMinutes = document.querySelector('span[data-minutes]');\nconst timerSeconds = document.querySelector('span[data-seconds]');\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0].getTime();\n\n        if (userSelectedDate <= Date.now()) {\n            iziToast.error({\n            message: 'Please choose a date in the future',\n            position: 'topCenter',\n            });\n            timerBtn.disabled = true\n        } else {\n            timerBtn.disabled = false\n        }\n    },\n};\n\nflatpickr(\"#datetime-picker\", options);\n\ntimerBtn.addEventListener('click', onBtnClick);\n\nfunction onBtnClick(event) {\n    timerBtn.disabled = true;\n    timerInput.disabled = true;\n\n    const dateNow = Date.now()\n    \n    const intervalId = setInterval(() => {\n        const [days, hours, minutes, seconds ] = convertMs(userSelectedDate - dateNow);\n        timerDays.textContent = days;\n        timerHours.textContent = hours;\n        timerMinutes.textContent = minutes;\n        timerSeconds.textContent = seconds;\n        userSelectedDate -= 1000;\n        if (userSelectedDate <= dateNow) {\n            clearInterval(intervalId);\n            iziToast.success({\n            message: 'The timer has finished its work',\n            position: 'topCenter',\n            });\n            }\n        }, 1000)\n};\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n    // console.log({ days, hours, minutes, seconds });\n    return [days, hours, minutes, seconds ].map(el => (el < 10) ? '0' + el : el.toString());\n}"],"names":["timerBtn","timerInput","timerDays","timerHours","timerMinutes","timerSeconds","userSelectedDate","options","selectedDates","iziToast","flatpickr","onBtnClick","event","dateNow","intervalId","days","hours","minutes","seconds","convertMs","ms","el"],"mappings":"+IAMA,MAAMA,EAAW,SAAS,cAAc,oBAAoB,EAC5DA,EAAS,SAAW,GAEpB,MAAMC,EAAa,SAAS,cAAc,kBAAkB,EAEtDC,EAAY,SAAS,cAAc,iBAAiB,EACpDC,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAe,SAAS,cAAc,oBAAoB,EAC1DC,EAAe,SAAS,cAAc,oBAAoB,EAEhE,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACnBF,EAAmBE,EAAc,CAAC,EAAE,QAAO,EAEvCF,GAAoB,KAAK,OACzBG,EAAS,MAAM,CACf,QAAS,qCACT,SAAU,WACtB,CAAa,EACDT,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAE3B,CACL,EAEAU,EAAU,mBAAoBH,CAAO,EAErCP,EAAS,iBAAiB,QAASW,CAAU,EAE7C,SAASA,EAAWC,EAAO,CACvBZ,EAAS,SAAW,GACpBC,EAAW,SAAW,GAEtB,MAAMY,EAAU,KAAK,IAAK,EAEpBC,EAAa,YAAY,IAAM,CACjC,KAAM,CAACC,EAAMC,EAAOC,EAASC,CAAO,EAAKC,EAAUb,EAAmBO,CAAO,EAC7EX,EAAU,YAAca,EACxBZ,EAAW,YAAca,EACzBZ,EAAa,YAAca,EAC3BZ,EAAa,YAAca,EAC3BZ,GAAoB,IAChBA,GAAoBO,IACpB,cAAcC,CAAU,EACxBL,EAAS,QAAQ,CACjB,QAAS,kCACT,SAAU,WACtB,CAAa,EAEJ,EAAE,GAAI,CACf,CAEA,SAASU,EAAUC,EAAI,CAQrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAEhE,MAAO,CAACL,EAAMC,EAAOC,EAASC,CAAO,EAAG,IAAIG,GAAOA,EAAK,GAAM,IAAMA,EAAKA,EAAG,SAAQ,CAAE,CAC1F"}